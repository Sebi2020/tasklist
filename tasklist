#!/usr/bin/env python3
import os
from os.path import basename
import fnmatch
from glob import glob
import sys
import re
import argparse
import os
class colors:
    FAIL = '\033[91m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    BLUE = '\033[94m'
    HEADER = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    @staticmethod
    def color(str, color):
        if not args.no_colors:
            return "%s%s%s" % (color, str, colors.ENDC)
        else:
            return str
    @staticmethod
    def color_se(str, start, end):
        if not args.no_colors: 
             return "%s%s%s" % (start, str, end)
        else:
             return str

search_pattern = re.compile(r"(TODO|FIXME|FIX|BUG): (.*)")
def get_all_files(directory, pattern, exclude):
    files = [os.path.join(dirpath, f)
        for dirpath, dirnames, files in os.walk(directory) if dirpath.strip("./") not in exclude
        for f in fnmatch.filter(files, pattern)]
    return files

def find_tasks_in_file(file):
    line_cnt = 0
    tasks = []
    with open(file) as f:
        if args.verbose == 2:
            print(colors.color("Scanning %s for tasks... " %file,colors.HEADER), end='')
        try:
            for line in f:
                line_cnt += 1
                line = search_pattern.search(line)
                if line is not None:
                    tasks.append((line.group(1), line_cnt, line.group(2).strip("*/")))
        except:
            pass
    if args.verbose == 2:
        if(len(tasks)>0):
            print(colors.color("found %d tasks."% len(tasks), colors.GREEN))
        else:
            print(colors.color("found 0 tasks.", colors.HEADER))
    return tasks
def get_stats(tasks):
    bugs = len([t for t in tasks if t[0] in ["BUG", "FIXME", "FIX"]])
    todos = len([t for t in tasks if t[0] in ["TODO", "XXX"]])
    return (todos, bugs)

def get_all_tasks(directory, pattern,exclude):
    files = get_all_files(directory,pattern,exclude)
    tasks = {}
    for file in files:
        t = find_tasks_in_file(file)
        if t != []:
            tasks[file] = t

    if args.verbose >= 1:
        task_cnt = sum([len(t[1]) for t in tasks.items()])
        print(colors.color("Found %d tasks in %d files!" % (task_cnt, len(tasks)), colors.GREEN));
    return tasks
def decorate_task(task):
    color = ""
    if task in ["BUG", "FIX", "FIXME"]:
        color = colors.FAIL;
    elif task in ["XXX"]:
        color = colors.WARNING
    else:
        color = colors.BLUE
    return colors.color("%-7s" %task, color)

if __name__ == "__main__":
    parser = argparse.ArgumentParser();
    parser.add_argument("-n","--no-colors", action="store_true", help="Disable ANSI-Color-Sequences")
    parser.add_argument("-p", "--pattern", default="*.c", help="Search pattern")
    parser.add_argument("-e","--exclude", default=[".git"], help="Exclude directories", action="append")
    parser.add_argument("-t", "--total", action="store_true", help="Enable overall stats")
    parser.add_argument("-s","--summary", action="store_true", help="Just give me a list of tasks")
    parser.add_argument("-v", "--verbose", default=0,action="count", help="Increase verbosity")
    parser.add_argument("dir", default=".", nargs="?", help="Specify search directory")
    args = parser.parse_args();
    if sys.stdout.isatty():
        width = os.get_terminal_size().columns

    file_tasks =  get_all_tasks(args.dir, args.pattern, args.exclude)
    overall_todos, overall_bugs = (0,0)
    if not args.summary:
        for file,tasks in file_tasks.items():
            todos,bugs = get_stats(tasks)
            if args.total:
                 overall_todos += todos
                 overall_bugs += bugs

            stat_str = "(Todos: %s, Bugs: %s) " % (colors.color_se("%d"%todos,colors.WARNING, colors.HEADER), colors.color_se("%d"%bugs, colors.FAIL, colors.HEADER))
            file_str =  " File " + file.strip("./") + " "
            file_str = colors.color_se(file_str,colors.BLUE,colors.HEADER)
            file_str += stat_str;
            if sys.stdout.isatty():
                print(colors.color(file_str.center(width+25,"="), colors.HEADER))
            else:
                print(colors.color(file_str.center(72,"="), colors.HEADER))
            
            print (colors.color("%-7s %-5s %s" % ("Type","Line","Comment"), colors.HEADER))
            for task in tasks:
                task_type, line, comment = task
                task_type = decorate_task(task_type)
                print("%s %-5d %s" % (task_type, line, comment))
            print()
    else:
        tasks = [t[1] for t in file_tasks.items()]
        all_tasks = []
        for file_task in tasks:
            for task in file_task:
                all_tasks.append(task)
        if len(all_tasks) > 0:
            if sys.stdout.isatty():
                print (colors.color(" Summary ".center(width-5, "="), colors.HEADER))
            else:
                print (colors.color(" Summary ".center(72, "="), colors.HEADER))
            print (colors.color("%-7s %s" % ("Type","Comment"), colors.HEADER))
        for task in all_tasks:
            task_type, _, comment = task
            task_type = decorate_task(task_type)
            print("%s %s" % (task_type, comment))
        overall_todos, overall_bugs = get_stats(all_tasks)
        print()
    if args.total:
        print(colors.color("Summary", colors.HEADER))
        stat_str = "Todos: %s, Bugs: %s" % (colors.color("%d"%overall_todos,colors.WARNING), colors.color("%d"%overall_bugs, colors.FAIL))
        print (stat_str)